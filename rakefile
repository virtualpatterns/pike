require 'rubygems'
require 'bundler/setup'

require 'rake'

namespace :mongo do

  desc 'Run MongoDB'
  task :run do |task|
    system("clear; bundle exec mongod run --rest --quiet --config #{File.join(File.dirname(__FILE__), %w[mongod.conf])}")
  end

end

namespace :pike do

  desc 'Create Pike console'
  task :console do |task|
    system("clear; bundle exec ruby_app console")
  end

  desc 'Run Pike'
  task :run do |task|
    system("clear; bundle exec ruby_app run")
  end

  desc 'Dump Pike database'
  task :dump do |task|
    system("bundle exec rm -rf dump")
    system("bundle exec mongodump --db pike --out dump")
    system("bundle exec tar -czf dump.tgz dump")
    system("bundle exec rm -rf dump")
  end

  desc 'Restore a dumped Pike database'
  task :restore do |task|
    system("bundle exec rm -rf dump")
    system("bundle exec tar -xzf dump.tgz")
    system("bundle exec mongorestore --db pike --drop dump/pike")
    system("bundle exec rm -rf dump")
  end

  namespace :test do

    desc 'Run feature tests for the given feature file or all features files if no argument is provided'
    task :features, :file do |task, arguments|
      system("bundle exec cucumber --format pretty --tags ~@broken --require features #{arguments.file}")
    end

    desc 'Run RSpec tests'
    task :specs, :file, :line do |task, arguments|
      if arguments.file
        if arguments.line
          system("bundle exec rspec #{arguments.file} --line_number=#{arguments.line} --format=documentation --colour")
        else
          system("bundle exec rspec #{arguments.file} --format=documentation --colour")
        end
      else
        system("bundle exec rspec spec/ --format=documentation --colour")
      end
    end

    desc 'Run all tests'
    task :all => ['test:specs',
                  'test:features']

  end

end

